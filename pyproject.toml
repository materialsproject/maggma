[project]
name = "maggma"
readme = "README.md"
dynamic = ["version"]
description="Framework to develop datapipelines from files on disk to full dissemenation API"
authors =[
    {name = "The Materials Project", email = "feedback@materialsproject.org"}
]
classifiers=[
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Science/Research",
        "Intended Audience :: System Administrators",
        "Intended Audience :: Information Technology",
        "Operating System :: OS Independent",
        "Topic :: Other/Nonlisted Topic",
        "Topic :: Database :: Front-Ends",
        "Topic :: Scientific/Engineering",
    ]
license = {file = "LICENSE"}
requires-python = ">=3.8"
dependencies = [
        "setuptools",
        "ruamel.yaml>=0.17",
        "pydantic>=2.0",
        "pydantic-settings>=2.0.3",
        "pymongo>=4.2.0",
        "monty>=2023.9.25",
        "mongomock>=3.10.0",
        "pydash>=4.1.0",
        "jsonschema>=3.1.1",
        "tqdm>=4.19.6",
        "mongogrant>=0.3.1",
        "aioitertools>=0.5.1",
        "numpy>=1.17.3",
        "fastapi>=0.42.0",
        "pyzmq>=24.0.1",
        "dnspython>=1.16.0",
        "sshtunnel>=0.1.5",
        "msgpack>=0.5.6",
        "orjson>=3.9.0",
        "boto3>=1.20.41",
        "python-dateutil>=2.8.2",
        "uvicorn>=0.18.3",
    ]

[project.urls]
Docs = "https://materialsproject.github.io/maggma/"
Repo = "https://github.com/materialsproject/maggma"
Package = "https://pypi.org/project/maggma"

[project.scripts]
mrun = "maggma.cli:run"

[project.optional-dependencies]
vasp = ["pymatgen"]
vault = ["hvac>=0.9.5"]
memray = ["memray>=1.7.0"]
montydb = ["montydb>=2.3.12"]
notebook_runner = ["IPython>=8.11", "nbformat>=5.0", "regex>=2020.6"]
azure = ["azure-storage-blob>=12.16.0", "azure-identity>=1.12.0"]
open_data = ["pandas>=2.1.4", "jsonlines>=4.0.0"]
testing = [
            "pytest",
            "pytest-cov",
            "pytest-mock",
            "pytest-asyncio",
            "pytest-xdist",
            "pre-commit",
            "moto",
            "ruff",
            "responses<0.22.0",
            "types-pyYAML",
            "types-setuptools",
            "types-python-dateutil",
            "starlette[full]"
        ]
docs = [
            "mkdocs>=1.4.0",
            "mkdocs-material>=8.3.9",
            "mkdocs-minify-plugin>=0.5.0",
            "mkdocstrings[python]>=0.18.1",
            "jinja2<3.2.0",
        ]

[build-system]
requires = ["setuptools>=61.0.0", "setuptools_scm[toml]>=5"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
version_scheme = "no-guess-dev"

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120
select = [
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "D",    # pydocstyle
  "E",    # pycodestyle error
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FA",   # flake8-future-annotations
  "FLY",  # flynt
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "PD",   # pandas-vet
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PYI",  # flakes8-pyi
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "SIM",  # flake8-simplify
  "SLOT", # flake8-slots
  "TCH",  # flake8-type-checking
  "TID",  # tidy imports
  "TID",  # flake8-tidy-imports
  "UP",   # pyupgrade
  "W",    # pycodestyle warning
  "YTT",  # flake8-2020
]
ignore = [
  "B023",    # Function definition does not bind loop variable
  "B028",    # No explicit stacklevel keyword argument found
  "B904",    # Within an except clause, raise exceptions with ...
  "C408",    # unnecessary-collection-call
  "D105",    # Missing docstring in magic method
  "D205",    # 1 blank line required between summary line and description
  "D212",    # Multi-line docstring summary should start at the first line
  "FA100",   # Missing `from __future__ import annotations`, but uses `typing.XXX` TODO
  "PD011",   # pandas-use-of-dot-values
  "PD901",   # pandas-df-variable-name
  "PT011",   # `pytest.raises(XXXError)` is too broad, set the `match` parameter... TODO
  "PERF203", # try-except-in-loop
  "PERF401", # manual-list-comprehension (TODO fix these or wait for autofix)
  "PLR",     # pylint refactor
  "PLW2901", # Outer for loop variable overwritten by inner assignment target
  "PT013",   # pytest-incorrect-pytest-import
  "RUF012",  # Disable checks for mutable class args. This is a non-problem.
  "SIM105",  # Use contextlib.suppress(OSError) instead of try-except-pass
]
pydocstyle.convention = "google"
isort.split-on-trailing-comma = false
src = ["src"]


[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tasks.py" = ["D"]
"tests/*" = ["D"]
"src/maggma/api/*" = ["B008", "B021", "RET505", "RET506"]
"tests/api/*" = ["B017", "B018"]
"src/maggma/cli/*" = ["EXE001"] # triggered by ! at top of file

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--color=yes -p no:warnings --import-mode=importlib --durations=30"
testpaths = [
    "tests",
]

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false

[tool.codespell]
ignore-words-list = "ot,nin"
skip = 'docs/CHANGELOG.md,tests/test_files/*'
